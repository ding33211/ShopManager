package com.soubu.goldensteward.base.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "User".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "User";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Portrait = new Property(2, String.class, "portrait", false, "PORTRAIT");
        public final static Property Phone = new Property(3, String.class, "phone", false, "PHONE");
        public final static Property Main_product = new Property(4, String.class, "main_product", false, "MAIN_PRODUCT");
        public final static Property Province = new Property(5, String.class, "province", false, "PROVINCE");
        public final static Property Province_id = new Property(6, String.class, "province_id", false, "PROVINCE_ID");
        public final static Property City = new Property(7, String.class, "city", false, "CITY");
        public final static Property City_id = new Property(8, String.class, "city_id", false, "CITY_ID");
        public final static Property Address = new Property(9, String.class, "address", false, "ADDRESS");
        public final static Property Contact_name = new Property(10, String.class, "contact_name", false, "CONTACT_NAME");
        public final static Property Job = new Property(11, String.class, "job", false, "JOB");
        public final static Property Company = new Property(12, String.class, "company", false, "COMPANY");
        public final static Property Company_size = new Property(13, String.class, "company_size", false, "COMPANY_SIZE");
        public final static Property Operation_mode = new Property(14, String.class, "operation_mode", false, "OPERATION_MODE");
        public final static Property Mail = new Property(15, String.class, "mail", false, "MAIL");
        public final static Property Main_industry = new Property(16, String.class, "main_industry", false, "MAIN_INDUSTRY");
        public final static Property Turnover = new Property(17, String.class, "turnover", false, "TURNOVER");
        public final static Property Fixed_telephone = new Property(18, String.class, "fixed_telephone", false, "FIXED_TELEPHONE");
        public final static Property Company_profile = new Property(19, String.class, "company_profile", false, "COMPANY_PROFILE");
        public final static Property Uid = new Property(20, String.class, "uid", false, "UID");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"User\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"PORTRAIT\" TEXT," + // 2: portrait
                "\"PHONE\" TEXT," + // 3: phone
                "\"MAIN_PRODUCT\" TEXT," + // 4: main_product
                "\"PROVINCE\" TEXT," + // 5: province
                "\"PROVINCE_ID\" TEXT," + // 6: province_id
                "\"CITY\" TEXT," + // 7: city
                "\"CITY_ID\" TEXT," + // 8: city_id
                "\"ADDRESS\" TEXT," + // 9: address
                "\"CONTACT_NAME\" TEXT," + // 10: contact_name
                "\"JOB\" TEXT," + // 11: job
                "\"COMPANY\" TEXT," + // 12: company
                "\"COMPANY_SIZE\" TEXT," + // 13: company_size
                "\"OPERATION_MODE\" TEXT," + // 14: operation_mode
                "\"MAIL\" TEXT," + // 15: mail
                "\"MAIN_INDUSTRY\" TEXT," + // 16: main_industry
                "\"TURNOVER\" TEXT," + // 17: turnover
                "\"FIXED_TELEPHONE\" TEXT," + // 18: fixed_telephone
                "\"COMPANY_PROFILE\" TEXT," + // 19: company_profile
                "\"UID\" TEXT);"); // 20: uid
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"User\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String portrait = entity.getPortrait();
        if (portrait != null) {
            stmt.bindString(3, portrait);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(4, phone);
        }
 
        String main_product = entity.getMain_product();
        if (main_product != null) {
            stmt.bindString(5, main_product);
        }
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(6, province);
        }
 
        String province_id = entity.getProvince_id();
        if (province_id != null) {
            stmt.bindString(7, province_id);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(8, city);
        }
 
        String city_id = entity.getCity_id();
        if (city_id != null) {
            stmt.bindString(9, city_id);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(10, address);
        }
 
        String contact_name = entity.getContact_name();
        if (contact_name != null) {
            stmt.bindString(11, contact_name);
        }
 
        String job = entity.getJob();
        if (job != null) {
            stmt.bindString(12, job);
        }
 
        String company = entity.getCompany();
        if (company != null) {
            stmt.bindString(13, company);
        }
 
        String company_size = entity.getCompany_size();
        if (company_size != null) {
            stmt.bindString(14, company_size);
        }
 
        String operation_mode = entity.getOperation_mode();
        if (operation_mode != null) {
            stmt.bindString(15, operation_mode);
        }
 
        String mail = entity.getMail();
        if (mail != null) {
            stmt.bindString(16, mail);
        }
 
        String main_industry = entity.getMain_industry();
        if (main_industry != null) {
            stmt.bindString(17, main_industry);
        }
 
        String turnover = entity.getTurnover();
        if (turnover != null) {
            stmt.bindString(18, turnover);
        }
 
        String fixed_telephone = entity.getFixed_telephone();
        if (fixed_telephone != null) {
            stmt.bindString(19, fixed_telephone);
        }
 
        String company_profile = entity.getCompany_profile();
        if (company_profile != null) {
            stmt.bindString(20, company_profile);
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(21, uid);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String portrait = entity.getPortrait();
        if (portrait != null) {
            stmt.bindString(3, portrait);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(4, phone);
        }
 
        String main_product = entity.getMain_product();
        if (main_product != null) {
            stmt.bindString(5, main_product);
        }
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(6, province);
        }
 
        String province_id = entity.getProvince_id();
        if (province_id != null) {
            stmt.bindString(7, province_id);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(8, city);
        }
 
        String city_id = entity.getCity_id();
        if (city_id != null) {
            stmt.bindString(9, city_id);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(10, address);
        }
 
        String contact_name = entity.getContact_name();
        if (contact_name != null) {
            stmt.bindString(11, contact_name);
        }
 
        String job = entity.getJob();
        if (job != null) {
            stmt.bindString(12, job);
        }
 
        String company = entity.getCompany();
        if (company != null) {
            stmt.bindString(13, company);
        }
 
        String company_size = entity.getCompany_size();
        if (company_size != null) {
            stmt.bindString(14, company_size);
        }
 
        String operation_mode = entity.getOperation_mode();
        if (operation_mode != null) {
            stmt.bindString(15, operation_mode);
        }
 
        String mail = entity.getMail();
        if (mail != null) {
            stmt.bindString(16, mail);
        }
 
        String main_industry = entity.getMain_industry();
        if (main_industry != null) {
            stmt.bindString(17, main_industry);
        }
 
        String turnover = entity.getTurnover();
        if (turnover != null) {
            stmt.bindString(18, turnover);
        }
 
        String fixed_telephone = entity.getFixed_telephone();
        if (fixed_telephone != null) {
            stmt.bindString(19, fixed_telephone);
        }
 
        String company_profile = entity.getCompany_profile();
        if (company_profile != null) {
            stmt.bindString(20, company_profile);
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(21, uid);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // portrait
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // phone
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // main_product
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // province
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // province_id
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // city
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // city_id
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // address
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // contact_name
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // job
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // company
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // company_size
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // operation_mode
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // mail
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // main_industry
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // turnover
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // fixed_telephone
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // company_profile
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20) // uid
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPortrait(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPhone(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMain_product(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setProvince(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setProvince_id(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCity(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCity_id(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAddress(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setContact_name(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setJob(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCompany(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCompany_size(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setOperation_mode(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setMail(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setMain_industry(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setTurnover(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setFixed_telephone(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setCompany_profile(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setUid(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
