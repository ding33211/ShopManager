package com.soubu.goldensteward.base.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Address".
*/
public class AddressDao extends AbstractDao<Address, Long> {

    public static final String TABLENAME = "Address";

    /**
     * Properties of entity Address.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Area_id = new Property(1, Integer.class, "area_id", false, "AREA_ID");
        public final static Property Parent_id = new Property(2, Integer.class, "parent_id", false, "PARENT_ID");
        public final static Property Area_name = new Property(3, String.class, "area_name", false, "AREA_NAME");
        public final static Property Sort = new Property(4, Integer.class, "sort", false, "SORT");
        public final static Property Tag = new Property(5, String.class, "tag", false, "TAG");
    }


    public AddressDao(DaoConfig config) {
        super(config);
    }
    
    public AddressDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"Address\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"AREA_ID\" INTEGER," + // 1: area_id
                "\"PARENT_ID\" INTEGER," + // 2: parent_id
                "\"AREA_NAME\" TEXT," + // 3: area_name
                "\"SORT\" INTEGER," + // 4: sort
                "\"TAG\" TEXT);"); // 5: tag
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"Address\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Address entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer area_id = entity.getArea_id();
        if (area_id != null) {
            stmt.bindLong(2, area_id);
        }
 
        Integer parent_id = entity.getParent_id();
        if (parent_id != null) {
            stmt.bindLong(3, parent_id);
        }
 
        String area_name = entity.getArea_name();
        if (area_name != null) {
            stmt.bindString(4, area_name);
        }
 
        Integer sort = entity.getSort();
        if (sort != null) {
            stmt.bindLong(5, sort);
        }
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(6, tag);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Address entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer area_id = entity.getArea_id();
        if (area_id != null) {
            stmt.bindLong(2, area_id);
        }
 
        Integer parent_id = entity.getParent_id();
        if (parent_id != null) {
            stmt.bindLong(3, parent_id);
        }
 
        String area_name = entity.getArea_name();
        if (area_name != null) {
            stmt.bindString(4, area_name);
        }
 
        Integer sort = entity.getSort();
        if (sort != null) {
            stmt.bindLong(5, sort);
        }
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(6, tag);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Address readEntity(Cursor cursor, int offset) {
        Address entity = new Address( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // area_id
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // parent_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // area_name
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // sort
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // tag
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Address entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setArea_id(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setParent_id(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setArea_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSort(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setTag(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Address entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Address entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Address entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
